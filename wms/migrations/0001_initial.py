# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-04-03 16:39
from __future__ import unicode_literals

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import wms.models.datasets.base
import wms.models.datasets.netcdf
import wms.models.layer


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('wms.ugriddataset', 'u grid dataset'), ('wms.sgriddataset', 's grid dataset'), ('wms.rgriddataset', 'r grid dataset'), ('wms.ugridtidedataset', 'u grid tide dataset')], db_index=True, max_length=255)),
                ('uri', models.CharField(max_length=1000)),
                ('name', models.CharField(help_text="Name/ID to use. No special characters or spaces ('_','0123456789' and A-Z are allowed).", max_length=200, unique=True)),
                ('title', models.CharField(help_text='Human Readable Title', max_length=200)),
                ('abstract', models.CharField(help_text='Short Description of Dataset', max_length=2000)),
                ('keep_up_to_date', models.BooleanField(default=True, help_text='Check this box to keep the dataset up-to-date if changes are made to it on disk or remote server.')),
                ('update_every', models.IntegerField(default=86400, help_text='Seconds between updating this dataset. Assume datasets check at the top of the hour')),
                ('display_all_timesteps', models.BooleanField(default=False, help_text='Check this box to display each time step in the GetCapabilities document, instead of just the range that the data spans.)')),
                ('cache_last_updated', models.DateTimeField(editable=False, null=True)),
                ('update_task', models.CharField(blank=True, help_text='The Celery task_id when this dataset is updating. Used for progress and front-end stuff.', max_length=200)),
                ('json', jsonfield.fields.JSONField(blank=True, help_text='Arbitrary dataset-specific json blob', null=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', slugify=wms.models.datasets.base.only_underscores)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('abstract', models.CharField(blank=True, help_text='Short Description of the Group', max_length=2000)),
                ('datasets', models.ManyToManyField(blank=True, help_text='Choose the datasets to add to this group, or create a dataset to add to this group', to='wms.Dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('var_name', models.CharField(help_text='Variable name from dataset', max_length=200)),
                ('std_name', models.CharField(blank=True, help_text="The 'standard_name' from the dataset variable", max_length=200)),
                ('units', models.CharField(blank=True, help_text="The 'units' from the dataset variable", max_length=200)),
                ('logscale', models.NullBooleanField(default=None, help_text='If this dataset variable should default to a log scale')),
                ('description', models.CharField(blank=True, help_text='Descriptive name of this layer, optional', max_length=200)),
                ('active', models.BooleanField(default=False)),
                ('default_min', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the min.  If None, autoscale is used.', null=True)),
                ('default_max', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the max.  If None, autoscale is used.', null=True)),
                ('default_numcontours', models.IntegerField(default=20)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wms.Dataset')),
            ],
            options={
                'ordering': ('var_name',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Server Title', max_length=1000)),
                ('abstract', models.CharField(blank=True, help_text='Server Abstract', max_length=2000)),
                ('keywords', models.CharField(blank=True, help_text='Comma Separated List of Keywords', max_length=2000)),
                ('contact_person', models.CharField(blank=True, help_text='Person to Contact (Optional)', max_length=1000)),
                ('contact_organization', models.CharField(blank=True, help_text='Contact Organization (Optional)', max_length=1000)),
                ('contact_position', models.CharField(blank=True, help_text='Contact Position (Optional)', max_length=1000)),
                ('contact_street_address', models.CharField(blank=True, help_text='Street Address (Optional)', max_length=1000)),
                ('contact_city_address', models.CharField(blank=True, help_text='Address: City (Optional)', max_length=1000)),
                ('contact_state_address', models.CharField(blank=True, help_text='Address: State or Providence (Optional)', max_length=1000)),
                ('contact_code_address', models.CharField(blank=True, help_text='Address: Postal Code (Optional)', max_length=1000)),
                ('contact_country_address', models.CharField(blank=True, help_text='Address: Country (Optional)', max_length=1000)),
                ('contact_telephone', models.CharField(blank=True, help_text='Contact Telephone Number (Optional)', max_length=1000)),
                ('contact_email', models.CharField(blank=True, help_text='Contact Email Address (Optional)', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Descriptive name of this style, optional', max_length=200)),
                ('colormap', models.CharField(choices=[('Accent', 'Accent'), ('Blues', 'Blues'), ('BrBG', 'BrBG'), ('BuGn', 'BuGn'), ('BuPu', 'BuPu'), ('CMRmap', 'CMRmap'), ('Dark2', 'Dark2'), ('GnBu', 'GnBu'), ('Greens', 'Greens'), ('Greys', 'Greys'), ('OrRd', 'OrRd'), ('Oranges', 'Oranges'), ('PRGn', 'PRGn'), ('Paired', 'Paired'), ('Pastel1', 'Pastel1'), ('Pastel2', 'Pastel2'), ('PiYG', 'PiYG'), ('PuBu', 'PuBu'), ('PuBuGn', 'PuBuGn'), ('PuOr', 'PuOr'), ('PuRd', 'PuRd'), ('Purples', 'Purples'), ('RdBu', 'RdBu'), ('RdGy', 'RdGy'), ('RdPu', 'RdPu'), ('RdYlBu', 'RdYlBu'), ('RdYlGn', 'RdYlGn'), ('Reds', 'Reds'), ('Set1', 'Set1'), ('Set2', 'Set2'), ('Set3', 'Set3'), ('Spectral', 'Spectral'), ('Wistia', 'Wistia'), ('YlGn', 'YlGn'), ('YlGnBu', 'YlGnBu'), ('YlOrBr', 'YlOrBr'), ('YlOrRd', 'YlOrRd'), ('afmhot', 'afmhot'), ('autumn', 'autumn'), ('binary', 'binary'), ('bone', 'bone'), ('brg', 'brg'), ('bwr', 'bwr'), ('cividis', 'cividis'), ('cool', 'cool'), ('coolwarm', 'coolwarm'), ('copper', 'copper'), ('cubehelix', 'cubehelix'), ('flag', 'flag'), ('gist_earth', 'gist_earth'), ('gist_gray', 'gist_gray'), ('gist_heat', 'gist_heat'), ('gist_ncar', 'gist_ncar'), ('gist_rainbow', 'gist_rainbow'), ('gist_stern', 'gist_stern'), ('gist_yarg', 'gist_yarg'), ('gnuplot', 'gnuplot'), ('gnuplot2', 'gnuplot2'), ('gray', 'gray'), ('hot', 'hot'), ('hsv', 'hsv'), ('inferno', 'inferno'), ('jet', 'jet'), ('magma', 'magma'), ('nipy_spectral', 'nipy_spectral'), ('ocean', 'ocean'), ('pink', 'pink'), ('plasma', 'plasma'), ('prism', 'prism'), ('rainbow', 'rainbow'), ('seismic', 'seismic'), ('spring', 'spring'), ('summer', 'summer'), ('tab10', 'tab10'), ('tab20', 'tab20'), ('tab20b', 'tab20b'), ('tab20c', 'tab20c'), ('terrain', 'terrain'), ('viridis', 'viridis'), ('winter', 'winter')], help_text='The matplotlib colormaps. See: http://matplotlib.org/1.2.1/examples/pylab_examples/show_colormaps.html.', max_length=200)),
                ('image_type', models.CharField(choices=[('filledcontours', 'filledcontours'), ('contours', 'contours'), ('filledhatches', 'filledhatches'), ('hatches', 'hatches'), ('pcolor', 'pcolor'), ('vectors', 'vectors')], default='filledcontours', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='UnidentifiedDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.CharField(max_length=1000)),
                ('name', models.CharField(help_text="Name/ID to use. No special characters or spaces ('_','0123456789' and A-Z are allowed).", max_length=200, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', slugify=wms.models.datasets.base.only_underscores)),
                ('job_id', models.TextField(blank=True, null=True)),
                ('messages', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('std_name', models.CharField(help_text="The 'standard_name' of this variable", max_length=200)),
                ('units', models.CharField(blank=True, help_text="The 'units' of this variable", max_length=200)),
                ('logscale', models.NullBooleanField(default=None, help_text='If this variable should default to a log scale')),
                ('default_min', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the min.  If None, autoscale is used.', null=True)),
                ('default_max', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the max.  If None, autoscale is used.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VirtualLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('var_name', models.CharField(help_text='Variable name from dataset', max_length=200)),
                ('std_name', models.CharField(blank=True, help_text="The 'standard_name' from the dataset variable", max_length=200)),
                ('units', models.CharField(blank=True, help_text="The 'units' from the dataset variable", max_length=200)),
                ('logscale', models.NullBooleanField(default=None, help_text='If this dataset variable should default to a log scale')),
                ('description', models.CharField(blank=True, help_text='Descriptive name of this layer, optional', max_length=200)),
                ('active', models.BooleanField(default=False)),
                ('default_min', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the min.  If None, autoscale is used.', null=True)),
                ('default_max', models.FloatField(blank=True, default=None, help_text='If no colorscalerange is specified, this is used for the max.  If None, autoscale is used.', null=True)),
                ('default_numcontours', models.IntegerField(default=20)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wms.Dataset')),
                ('default_style', models.ForeignKey(default=wms.models.layer.get_default_vlayer_style, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='vl_default_style', to='wms.Style')),
                ('styles', models.ManyToManyField(to='wms.Style')),
            ],
            options={
                'ordering': ('var_name',),
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='variable',
            unique_together=set([('std_name', 'units')]),
        ),
        migrations.AddField(
            model_name='layer',
            name='default_style',
            field=models.ForeignKey(default=wms.models.layer.get_default_layer_style, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='l_default_style', to='wms.Style'),
        ),
        migrations.AddField(
            model_name='layer',
            name='styles',
            field=models.ManyToManyField(to='wms.Style'),
        ),
        migrations.CreateModel(
            name='RGridDataset',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('wms.dataset', wms.models.datasets.netcdf.NetCDFDataset),
        ),
        migrations.CreateModel(
            name='SGridDataset',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('wms.dataset', wms.models.datasets.netcdf.NetCDFDataset),
        ),
        migrations.CreateModel(
            name='UGridDataset',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('wms.dataset', wms.models.datasets.netcdf.NetCDFDataset),
        ),
        migrations.CreateModel(
            name='UGridTideDataset',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('wms.ugriddataset',),
        ),
    ]
